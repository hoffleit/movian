#import "skin://theme.view"
#import "skin://styles/style_list.view"


#define PLAYDECK_BUTTON(ICON, TITLE, EVENT, ENABLED, ID, ROTATED = 0) {

  widget(container_z, {
    id: ID;
    onEvent(activate, EVENT);
    focusable: ENABLED;

    widget(quad, {
      additive: true;
      alpha: 0.1 * isHovered() + 0.6 * isNavFocused();
    });
    widget(icon, {
      angle: iir(ROTATED, 4) * -90;
      size: 2em;
      source: ICON;
      color: select(isNavFocused(), 0, 1);
      alpha: 0.7 * iir(ENABLED, 8) + 0.3;
    });
  });
}


delta($ui.fullwindow, isVisible());
delta($ui.disableScreensaver, $self.media.playstatus == "play");

$self.directClose = 1;
$self.close = $self.media.playstatus == "stop";
$self.model.loading = $self.media.loading;
$self.model.io <- $self.media.io;

$clone.osdpage = 0;
delta($ui.hideClock, isVisible() && !$core.clock.showDuringVideo &&!($clone.osdpage || $clone.showPlaydeck));
$view.iconPad = select($ui.aspect < 1 ||
                       isVoid($self.media.metadata.icon), 0, 7em);

onEvent(back, {
  $clone.showPlaydeck = 0;
}, $clone.showPlaydeck && !$clone.osdpage);

onEvent(back, {
  $clone.osdpage = 0;
}, $clone.osdpage);

//---------------------------
// Handle menu button
//---------------------------


onEvent(menu, {
  $clone.osdpage = 1;
  $clone.showPlaydeck = 1;
  focus("osd_main");
}, !$clone.osdpage);

onEvent(menu, {
  $clone.osdpage = 0;
  $clone.showPlaydeck = 0;
}, $clone.osdpage);


onInactivity(select($clone.showPlaydeck && $clone.osdpage == 0, 5, 0), {
  $clone.showPlaydeck = 0;
});


$view.showSeekBar =
  $ui.pointerVisible ||
  $clone.showPlaydeck ||
  changed($self.media.seektime, 5, true) ||
  changed($self.url, 5, true) ||
  $self.media.playstatus == "pause";

widget(container_z, {
  clickable: true;
  onEvent(activate, {
    toggle($clone.showPlaydeck);
    focus("pause-btn");
  });

  // --------------------------------------------
  // --- Primary video display
  // --------------------------------------------

  widget(layer, {
    widget(video, {
      id: "videowidget";
      primary: true;

      how: $self.how;
      itemModel: $self.previous.itemModel;
      parentModel: $self.previous.parentModel;

      parentUrl: $self.parentUrl;
      source: $self.source;

      focusable: 0.1;
      injectEventsFrom($self.control);

      onEvent(left,  deliverEvent($self.media.eventSink, "SeekReverse"));
      onEvent(right, deliverEvent($self.media.eventSink, "SeekForward"));

      onEvent(up,    deliverEvent($self.media.eventSink, "VolumeUp"));
      onEvent(down,  deliverEvent($self.media.eventSink, "VolumeDown"));

      bottomOverlayDisplacement: $clone.bottomOsdHeight;

    });


    widget(container_y, {
      hidden: !$clone.showPlaydeck;

      widget(container_x, {
        filterConstraintY: true;

        widget(dummy, {
          // A clickable zone that closes everything
          clickable: true;
          onEvent(activate, {
            $clone.osdpage = 0;
            $clone.showPlaydeck = 0;
          });
        });


        widget(displacement, {
          hidden: iir($clone.osdpage > 0, 3) < 0.01;

          width: 22em;
          scaling: [1.2 - iir($clone.osdpage > 0, 3) * 0.2,
                    1.2 - iir($clone.osdpage > 0, 3) * 0.2,
                    1];

          widget(container_z, {

            onEvent(left, {
              $clone.osdpage = 0;
            }, true, false);


            widget(quad, {
              color: 0;
              alpha: iir($clone.osdpage > 0, 4) * 0.8;
            });
            widget(layer, {
#import "skin://styles/style_sidebar.view"

              widget(loader, {
                autohide: true;
                alpha: iir($clone.osdpage == 1, 4);
                source: select($clone.osdpage, "skin://osd/osd_main.view", "");
              });


              widget(loader, {
                autohide: true;
                source: translate($clone.osdpage, "",
                                  2, "skin://osd/osd_settings_subs.view",
                                  3, "skin://osd/osd_settings_audio.view",
                                  4, "skin://osd/osd_settings_video.view",
                                  100, "skin://osd/osd_subs.view",
                                  101, "skin://osd/osd_audio.view",
                                  102, "skin://osd/osd_chapter.view",
                                  103, "skin://osd/osd_seek.view"
                                 );
              });
            });
          });
        });
      });

      // OSD buttons row

      widget(container_z, {
        height: 2.2em;
        delta($clone.bottomOsdHeight, isVisible() * getHeight());

        onEvent(up, {
          $clone.osdpage = 0;
          $clone.showPlaydeck = 0;
        }, $clone.osdpage == 0);

        widget(quad, {
          alpha: 0.8;
          color: 0;
        });

        widget(container_x, {
          spacing: 1em;
          padding: [1em + $view.iconPad, 0.1em];

          align: center;
          
          PLAYDECK_BUTTON("skin://icons/ic_stop_48px.svg",
                          _("Stop"),
                          deliverEvent($self.control, Stop),
                          true, "stop-btn");

          PLAYDECK_BUTTON("skin://icons/ic_subtitles_48px.svg",
                          _("Subtitles"),
                          {
                            $clone.osdpage = select($clone.osdpage == 100, 0, 100);
                            focus("osd_subs");
                          }, true, "subtitles-btn");

          PLAYDECK_BUTTON("skin://icons/ic_skip_previous_48px.svg",
                          _("Previous"),
                          deliverEvent($self.control, PreviousTrack),
                          $self.media.canSkipBackward ||
                          $self.media.canSeek,
                         "prev-btn");

          PLAYDECK_BUTTON(translate($core.media.current.playstatus,
                                    "skin://icons/ic_pause_48px.svg",
                                    "pause",
                                    "skin://icons/ic_play_arrow_48px.svg"),
                          _("Play/Pause"),
                          deliverEvent($self.control, PlayPause),
                          $self.media.canPause,
                         "pause-btn");

          PLAYDECK_BUTTON("skin://icons/ic_skip_next_48px.svg",
                          _("Next"),
                          deliverEvent($self.control, NextTrack),
                          $self.media.canSkipForward,
                         "next-btn");

          PLAYDECK_BUTTON("skin://icons/ic_speaker_48px.svg",
                          _("Audio tracks"),
                          {
                            $clone.osdpage = select($clone.osdpage == 101, 0, 101);
                            focus("osd_audio");
                          }, true, "audio-btn");

          PLAYDECK_BUTTON("skin://icons/ic_menu_48px.svg",
                          _("Settings"),
                          {
                            toggle($clone.osdpage);
                            focus("osd_main");
                          }, true, "menu-btn",
                          $clone.osdpage > 0 && $clone.osdpage < 100);

          PLAYDECK_BUTTON("skin://icons/ic_chapter_48px.svg",
                          _("Chapter"),
                          {
                            $clone.osdpage = select($clone.osdpage == 102, 0, 102);
                            focus("osd_chapter");
                          }, $self.media.chapterindex.available, "chapter-btn");

          PLAYDECK_BUTTON("skin://icons/ic_chapter_48px.svg",
                          _("Seek"),
                          {
                            $clone.osdpage = select($clone.osdpage == 103, 0, 103);
                            focus("osd_seek");
                          }, $self.media.seekindex.available, "seek-btn");

        });
      });
      widget(dummy, {
        hidden: !$self.media.canSeek;
        height: 2em + $ui.universeBottomHeight;
      });
    });
  });
  // Seekbar row

  widget(container_y, {
    hidden: !$view.showSeekBar || !$self.media.canSeek;
    align: bottom;
    padding: [0,0,0,$ui.universeBottomHeight];
    widget(container_z, {
      delta($clone.bottomOsdHeight, isVisible() * getHeight());
      height: 2em;
      widget(quad, {
        alpha: 0.8;
        color: 0;
      });

      widget(container_x, {
        spacing: 0.5em;
        padding: [$view.iconPad, 0, 0, 0];

        widget(label, {
          width: 4em;
          caption: value2duration($view.tentativeSeekPosition ??
                                  $self.media.currenttime);
          align: right;
        });

        widget(container_z, {
          widget(container_y, {
            align: center;
            widget(container_z, {
              height: 3;
              widget(container_y, {
                padding: 1;
                widget(quad, {
                  alpha: 0.3;
                  additive: true;
                });
              });
            });
          });

          widget(slider_x, {
            knobOverEdges: true;
            tentative: $view.tentativeSeekPosition;
            alwaysGrabKnob: true;
            clickable: true;
            bind($self.media.currenttime);
            max: $self.media.metadata.duration;
            secondBarValue: $core.media.current.buffer.delay;
            widget(icon, {
              source: "skin://icons/dot.png";
            });
            widget(container_y, {
              space(1);
              widget(quad, {
                height: 3;
                alpha: 0.9;
                additive: true;
              });
              space(1);
            });
            widget(container_y, {
              space(1);
              widget(quad, {
                height: 3;
                alpha: 0.5;
                additive: true;
              });
              space(1);
            });
          });
        });
        widget(label, {
          width: 4em;
          caption: value2duration($self.media.metadata.duration);
        });
      });
    });
  });


  widget(container_y, {
    hidden: $clone.osdpage > 0;
    padding: [2em, 0.5em];

    style(notifications, {
      shadow: true;
      filterConstraintX: true;
    });

    widget(label, {
      alpha: iir($view.showSeekBar ||
                 changed($self.media.metadata.title, 5, true) ||
                 $self.media.error, 8);

      padding: [1.5em, 0];
      caption: $self.media.metadata.title;
      shadow: true;
      size: 2em;
    });
    cloner($core.media.current.chapterindex.positions, container_z, {
      widget(label, {
        hidden: select($parent.media.currenttime > $self.timestamp &&
                     $parent.media.currenttime < $self.end, false, true);
        alpha: iir($view.showSeekBar, 8);
        caption: $self.title;
        shadow: true;
        size: 1.5em;
        spacing:0;
      });
    });
    widget(container_x, {
      spacing: 0.5em;
      hidden: select($self.media.error, false, true);
      widget(icon, {
	source: "skin://icons/ic_error_48px.svg";
      });
      widget(label, {
	caption: $self.media.error;
        style: "notifications";
      });
    });

    widget(container_x, {
      spacing: 0.5em;
      hidden: select($self.media.video.too_slow, false, true);
      widget(icon, {
	source: "skin://icons/ic_error_48px.svg";
      });
      widget(label, {
	caption: _("CPU is too slow to decode this video");
        style: "notifications";
      });
    });


    cloner($self.media.notifications, container_x, {
      spacing: 0.5em;
      widget(icon, {
	source: "skin://icons/ic_error_48px.svg";
	color: translate($self.type, [1,1,1],
			 "info", [0.5, 1, 0.5],
			 "warning",  [1, 1, 0.5],
			 "error", [1, 0.5, 0.5]);
      });
      widget(label, {
	caption: $self.text;
        style: "notifications";
	color: translate($self.type, [1,1,1],
			 "info", [0.5, 1, 0.5],
			 "warning",  [1, 1, 0.5],
			 "error", [1, 0.5, 0.5]);
      });
    });


    widget(container_x, {
      spacing: 0.5em;
      alpha: iir(changed($self.media.audio.active.url, 5) &&
                 !isVoid($self.media.audio.active.url), 8);
      widget(icon, {
        source:  "skin://icons/ic_speaker_48px.svg";
      });
      widget(label, {
        style: "notifications";
	caption: join(" - ",
                      $self.media.audio.active.title,
                      $self.media.audio.active.language,
                      $self.media.audio.active.source,
                      $self.media.audio.active.longformat ??
                      $self.media.audio.active.format);
      });
    });

    widget(container_x, {
      hidden: !changed($self.media.ctrl.audiovolume, 2, true) ||
        !$self.media.ctrl.audiovolume;
      spacing: 0.5em;
      widget(icon, {
      });
      widget(label, {
        style: "notifications";
        caption: fmt(_("Audio volume adjustment: %d dB"),
                     $self.media.ctrl.audiovolume);
      });
    });

    widget(container_x, {
      spacing: 0.5em;
      alpha: iir(changed($self.media.subtitle.active.url, 5) &&
                 !isVoid($self.media.subtitle.active.url), 8);

      widget(icon, {
        source: "skin://icons/ic_subtitles_48px.svg";
      });
      widget(label, {
        style: "notifications";
	caption: join(" - ",
                      $self.media.subtitle.active.title,
                      $self.media.subtitle.active.language,
                      $self.media.subtitle.active.source,
                      $self.media.subtitle.active.longformat ??
                      $self.media.subtitle.active.format);
      });
    });
  });


  widget(container_x, {
    hidden: $ui.aspect < 1;
    padding: 1em;
    widget(image, {
      alpha: iir($view.showSeekBar || changed($self.media.metadata.icon, 5, true), 4);
      align: bottom;
      width: 6em;
      source: $self.media.metadata.icon;
    });
    space(1);
  });

  widget(container_y, {
    align: top;
    widget(container_x, {
      height: 3em;
      BackButton($clone.showPlaydeck, {
        $self.close = true;
      });
    });
  });
});
